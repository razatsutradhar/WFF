Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUAL
    EXISTS
    FORALL

Grammar

Rule 0     S' -> wffstart
Rule 1     wffstart -> start
Rule 2     start -> wff
Rule 3     start -> list
Rule 4     start -> bool
Rule 5     wff -> NUMBER
Rule 6     wff -> LPAR PLUS wff wff RPAR
Rule 7     wff -> LPAR MINUS wff wff RPAR
Rule 8     wff -> LPAR MULT wff wff RPAR
Rule 9     wff -> LPAR DIV wff wff RPAR
Rule 10    wff -> STRING
Rule 11    wff -> VARIABLE
Rule 12    bool -> LPAR LESS wff wff RPAR
Rule 13    bool -> LPAR OR bool bool RPAR
Rule 14    bool -> LPAR AND bool bool RPAR
Rule 15    bool -> LPAR GREAT wff wff RPAR
Rule 16    bool -> LPAR GOEQ wff wff RPAR
Rule 17    bool -> LPAR LOEQ wff wff RPAR
Rule 18    bool -> LPAR NEQUAL wff wff RPAR
Rule 19    bool -> LPAR NOT bool RPAR
Rule 20    bool -> TRUE
Rule 21    bool -> FALSE
Rule 22    list -> LPAR array RPAR
Rule 23    array -> <empty>
Rule 24    array -> array wff

Terminals, with rules where they appear

AND                  : 14
DIV                  : 9
EQUAL                : 
EXISTS               : 
FALSE                : 21
FORALL               : 
GOEQ                 : 16
GREAT                : 15
LESS                 : 12
LOEQ                 : 17
LPAR                 : 6 7 8 9 12 13 14 15 16 17 18 19 22
MINUS                : 7
MULT                 : 8
NEQUAL               : 18
NOT                  : 19
NUMBER               : 5
OR                   : 13
PLUS                 : 6
RPAR                 : 6 7 8 9 12 13 14 15 16 17 18 19 22
STRING               : 10
TRUE                 : 20
VARIABLE             : 11
error                : 

Nonterminals, with rules where they appear

array                : 22 24
bool                 : 4 13 13 14 14 19
list                 : 3
start                : 1
wff                  : 2 6 6 7 7 8 8 9 9 12 12 15 15 16 16 17 17 18 18 24
wffstart             : 0

Parsing method: LALR

state 0

    (0) S' -> . wffstart
    (1) wffstart -> . start
    (2) start -> . wff
    (3) start -> . list
    (4) start -> . bool
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE
    (22) list -> . LPAR array RPAR
    (12) bool -> . LPAR LESS wff wff RPAR
    (13) bool -> . LPAR OR bool bool RPAR
    (14) bool -> . LPAR AND bool bool RPAR
    (15) bool -> . LPAR GREAT wff wff RPAR
    (16) bool -> . LPAR GOEQ wff wff RPAR
    (17) bool -> . LPAR LOEQ wff wff RPAR
    (18) bool -> . LPAR NEQUAL wff wff RPAR
    (19) bool -> . LPAR NOT bool RPAR
    (20) bool -> . TRUE
    (21) bool -> . FALSE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    wffstart                       shift and go to state 1
    start                          shift and go to state 2
    wff                            shift and go to state 3
    list                           shift and go to state 4
    bool                           shift and go to state 5

state 1

    (0) S' -> wffstart .



state 2

    (1) wffstart -> start .

    $end            reduce using rule 1 (wffstart -> start .)


state 3

    (2) start -> wff .

    $end            reduce using rule 2 (start -> wff .)


state 4

    (3) start -> list .

    $end            reduce using rule 3 (start -> list .)


state 5

    (4) start -> bool .

    $end            reduce using rule 4 (start -> bool .)


state 6

    (5) wff -> NUMBER .

    $end            reduce using rule 5 (wff -> NUMBER .)
    NUMBER          reduce using rule 5 (wff -> NUMBER .)
    LPAR            reduce using rule 5 (wff -> NUMBER .)
    STRING          reduce using rule 5 (wff -> NUMBER .)
    VARIABLE        reduce using rule 5 (wff -> NUMBER .)
    RPAR            reduce using rule 5 (wff -> NUMBER .)


state 7

    (6) wff -> LPAR . PLUS wff wff RPAR
    (7) wff -> LPAR . MINUS wff wff RPAR
    (8) wff -> LPAR . MULT wff wff RPAR
    (9) wff -> LPAR . DIV wff wff RPAR
    (22) list -> LPAR . array RPAR
    (12) bool -> LPAR . LESS wff wff RPAR
    (13) bool -> LPAR . OR bool bool RPAR
    (14) bool -> LPAR . AND bool bool RPAR
    (15) bool -> LPAR . GREAT wff wff RPAR
    (16) bool -> LPAR . GOEQ wff wff RPAR
    (17) bool -> LPAR . LOEQ wff wff RPAR
    (18) bool -> LPAR . NEQUAL wff wff RPAR
    (19) bool -> LPAR . NOT bool RPAR
    (23) array -> .
    (24) array -> . array wff

    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULT            shift and go to state 14
    DIV             shift and go to state 15
    LESS            shift and go to state 17
    OR              shift and go to state 18
    AND             shift and go to state 19
    GREAT           shift and go to state 20
    GOEQ            shift and go to state 21
    LOEQ            shift and go to state 22
    NEQUAL          shift and go to state 23
    NOT             shift and go to state 24
    RPAR            reduce using rule 23 (array -> .)
    NUMBER          reduce using rule 23 (array -> .)
    LPAR            reduce using rule 23 (array -> .)
    STRING          reduce using rule 23 (array -> .)
    VARIABLE        reduce using rule 23 (array -> .)

    array                          shift and go to state 16

state 8

    (10) wff -> STRING .

    $end            reduce using rule 10 (wff -> STRING .)
    NUMBER          reduce using rule 10 (wff -> STRING .)
    LPAR            reduce using rule 10 (wff -> STRING .)
    STRING          reduce using rule 10 (wff -> STRING .)
    VARIABLE        reduce using rule 10 (wff -> STRING .)
    RPAR            reduce using rule 10 (wff -> STRING .)


state 9

    (11) wff -> VARIABLE .

    $end            reduce using rule 11 (wff -> VARIABLE .)
    NUMBER          reduce using rule 11 (wff -> VARIABLE .)
    LPAR            reduce using rule 11 (wff -> VARIABLE .)
    STRING          reduce using rule 11 (wff -> VARIABLE .)
    VARIABLE        reduce using rule 11 (wff -> VARIABLE .)
    RPAR            reduce using rule 11 (wff -> VARIABLE .)


state 10

    (20) bool -> TRUE .

    $end            reduce using rule 20 (bool -> TRUE .)
    LPAR            reduce using rule 20 (bool -> TRUE .)
    TRUE            reduce using rule 20 (bool -> TRUE .)
    FALSE           reduce using rule 20 (bool -> TRUE .)
    RPAR            reduce using rule 20 (bool -> TRUE .)


state 11

    (21) bool -> FALSE .

    $end            reduce using rule 21 (bool -> FALSE .)
    LPAR            reduce using rule 21 (bool -> FALSE .)
    TRUE            reduce using rule 21 (bool -> FALSE .)
    FALSE           reduce using rule 21 (bool -> FALSE .)
    RPAR            reduce using rule 21 (bool -> FALSE .)


state 12

    (6) wff -> LPAR PLUS . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 26

state 13

    (7) wff -> LPAR MINUS . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 27

state 14

    (8) wff -> LPAR MULT . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 28

state 15

    (9) wff -> LPAR DIV . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 29

state 16

    (22) list -> LPAR array . RPAR
    (24) array -> array . wff
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    RPAR            shift and go to state 30
    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 31

state 17

    (12) bool -> LPAR LESS . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 32

state 18

    (13) bool -> LPAR OR . bool bool RPAR
    (12) bool -> . LPAR LESS wff wff RPAR
    (13) bool -> . LPAR OR bool bool RPAR
    (14) bool -> . LPAR AND bool bool RPAR
    (15) bool -> . LPAR GREAT wff wff RPAR
    (16) bool -> . LPAR GOEQ wff wff RPAR
    (17) bool -> . LPAR LOEQ wff wff RPAR
    (18) bool -> . LPAR NEQUAL wff wff RPAR
    (19) bool -> . LPAR NOT bool RPAR
    (20) bool -> . TRUE
    (21) bool -> . FALSE

    LPAR            shift and go to state 33
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    bool                           shift and go to state 34

state 19

    (14) bool -> LPAR AND . bool bool RPAR
    (12) bool -> . LPAR LESS wff wff RPAR
    (13) bool -> . LPAR OR bool bool RPAR
    (14) bool -> . LPAR AND bool bool RPAR
    (15) bool -> . LPAR GREAT wff wff RPAR
    (16) bool -> . LPAR GOEQ wff wff RPAR
    (17) bool -> . LPAR LOEQ wff wff RPAR
    (18) bool -> . LPAR NEQUAL wff wff RPAR
    (19) bool -> . LPAR NOT bool RPAR
    (20) bool -> . TRUE
    (21) bool -> . FALSE

    LPAR            shift and go to state 33
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    bool                           shift and go to state 35

state 20

    (15) bool -> LPAR GREAT . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 36

state 21

    (16) bool -> LPAR GOEQ . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 37

state 22

    (17) bool -> LPAR LOEQ . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 38

state 23

    (18) bool -> LPAR NEQUAL . wff wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 39

state 24

    (19) bool -> LPAR NOT . bool RPAR
    (12) bool -> . LPAR LESS wff wff RPAR
    (13) bool -> . LPAR OR bool bool RPAR
    (14) bool -> . LPAR AND bool bool RPAR
    (15) bool -> . LPAR GREAT wff wff RPAR
    (16) bool -> . LPAR GOEQ wff wff RPAR
    (17) bool -> . LPAR LOEQ wff wff RPAR
    (18) bool -> . LPAR NEQUAL wff wff RPAR
    (19) bool -> . LPAR NOT bool RPAR
    (20) bool -> . TRUE
    (21) bool -> . FALSE

    LPAR            shift and go to state 33
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    bool                           shift and go to state 40

state 25

    (6) wff -> LPAR . PLUS wff wff RPAR
    (7) wff -> LPAR . MINUS wff wff RPAR
    (8) wff -> LPAR . MULT wff wff RPAR
    (9) wff -> LPAR . DIV wff wff RPAR

    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MULT            shift and go to state 14
    DIV             shift and go to state 15


state 26

    (6) wff -> LPAR PLUS wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 41

state 27

    (7) wff -> LPAR MINUS wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 42

state 28

    (8) wff -> LPAR MULT wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 43

state 29

    (9) wff -> LPAR DIV wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 44

state 30

    (22) list -> LPAR array RPAR .

    $end            reduce using rule 22 (list -> LPAR array RPAR .)


state 31

    (24) array -> array wff .

    RPAR            reduce using rule 24 (array -> array wff .)
    NUMBER          reduce using rule 24 (array -> array wff .)
    LPAR            reduce using rule 24 (array -> array wff .)
    STRING          reduce using rule 24 (array -> array wff .)
    VARIABLE        reduce using rule 24 (array -> array wff .)


state 32

    (12) bool -> LPAR LESS wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 45

state 33

    (12) bool -> LPAR . LESS wff wff RPAR
    (13) bool -> LPAR . OR bool bool RPAR
    (14) bool -> LPAR . AND bool bool RPAR
    (15) bool -> LPAR . GREAT wff wff RPAR
    (16) bool -> LPAR . GOEQ wff wff RPAR
    (17) bool -> LPAR . LOEQ wff wff RPAR
    (18) bool -> LPAR . NEQUAL wff wff RPAR
    (19) bool -> LPAR . NOT bool RPAR

    LESS            shift and go to state 17
    OR              shift and go to state 18
    AND             shift and go to state 19
    GREAT           shift and go to state 20
    GOEQ            shift and go to state 21
    LOEQ            shift and go to state 22
    NEQUAL          shift and go to state 23
    NOT             shift and go to state 24


state 34

    (13) bool -> LPAR OR bool . bool RPAR
    (12) bool -> . LPAR LESS wff wff RPAR
    (13) bool -> . LPAR OR bool bool RPAR
    (14) bool -> . LPAR AND bool bool RPAR
    (15) bool -> . LPAR GREAT wff wff RPAR
    (16) bool -> . LPAR GOEQ wff wff RPAR
    (17) bool -> . LPAR LOEQ wff wff RPAR
    (18) bool -> . LPAR NEQUAL wff wff RPAR
    (19) bool -> . LPAR NOT bool RPAR
    (20) bool -> . TRUE
    (21) bool -> . FALSE

    LPAR            shift and go to state 33
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    bool                           shift and go to state 46

state 35

    (14) bool -> LPAR AND bool . bool RPAR
    (12) bool -> . LPAR LESS wff wff RPAR
    (13) bool -> . LPAR OR bool bool RPAR
    (14) bool -> . LPAR AND bool bool RPAR
    (15) bool -> . LPAR GREAT wff wff RPAR
    (16) bool -> . LPAR GOEQ wff wff RPAR
    (17) bool -> . LPAR LOEQ wff wff RPAR
    (18) bool -> . LPAR NEQUAL wff wff RPAR
    (19) bool -> . LPAR NOT bool RPAR
    (20) bool -> . TRUE
    (21) bool -> . FALSE

    LPAR            shift and go to state 33
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    bool                           shift and go to state 47

state 36

    (15) bool -> LPAR GREAT wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 48

state 37

    (16) bool -> LPAR GOEQ wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 49

state 38

    (17) bool -> LPAR LOEQ wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 50

state 39

    (18) bool -> LPAR NEQUAL wff . wff RPAR
    (5) wff -> . NUMBER
    (6) wff -> . LPAR PLUS wff wff RPAR
    (7) wff -> . LPAR MINUS wff wff RPAR
    (8) wff -> . LPAR MULT wff wff RPAR
    (9) wff -> . LPAR DIV wff wff RPAR
    (10) wff -> . STRING
    (11) wff -> . VARIABLE

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 25
    STRING          shift and go to state 8
    VARIABLE        shift and go to state 9

    wff                            shift and go to state 51

state 40

    (19) bool -> LPAR NOT bool . RPAR

    RPAR            shift and go to state 52


state 41

    (6) wff -> LPAR PLUS wff wff . RPAR

    RPAR            shift and go to state 53


state 42

    (7) wff -> LPAR MINUS wff wff . RPAR

    RPAR            shift and go to state 54


state 43

    (8) wff -> LPAR MULT wff wff . RPAR

    RPAR            shift and go to state 55


state 44

    (9) wff -> LPAR DIV wff wff . RPAR

    RPAR            shift and go to state 56


state 45

    (12) bool -> LPAR LESS wff wff . RPAR

    RPAR            shift and go to state 57


state 46

    (13) bool -> LPAR OR bool bool . RPAR

    RPAR            shift and go to state 58


state 47

    (14) bool -> LPAR AND bool bool . RPAR

    RPAR            shift and go to state 59


state 48

    (15) bool -> LPAR GREAT wff wff . RPAR

    RPAR            shift and go to state 60


state 49

    (16) bool -> LPAR GOEQ wff wff . RPAR

    RPAR            shift and go to state 61


state 50

    (17) bool -> LPAR LOEQ wff wff . RPAR

    RPAR            shift and go to state 62


state 51

    (18) bool -> LPAR NEQUAL wff wff . RPAR

    RPAR            shift and go to state 63


state 52

    (19) bool -> LPAR NOT bool RPAR .

    $end            reduce using rule 19 (bool -> LPAR NOT bool RPAR .)
    LPAR            reduce using rule 19 (bool -> LPAR NOT bool RPAR .)
    TRUE            reduce using rule 19 (bool -> LPAR NOT bool RPAR .)
    FALSE           reduce using rule 19 (bool -> LPAR NOT bool RPAR .)
    RPAR            reduce using rule 19 (bool -> LPAR NOT bool RPAR .)


state 53

    (6) wff -> LPAR PLUS wff wff RPAR .

    $end            reduce using rule 6 (wff -> LPAR PLUS wff wff RPAR .)
    NUMBER          reduce using rule 6 (wff -> LPAR PLUS wff wff RPAR .)
    LPAR            reduce using rule 6 (wff -> LPAR PLUS wff wff RPAR .)
    STRING          reduce using rule 6 (wff -> LPAR PLUS wff wff RPAR .)
    VARIABLE        reduce using rule 6 (wff -> LPAR PLUS wff wff RPAR .)
    RPAR            reduce using rule 6 (wff -> LPAR PLUS wff wff RPAR .)


state 54

    (7) wff -> LPAR MINUS wff wff RPAR .

    $end            reduce using rule 7 (wff -> LPAR MINUS wff wff RPAR .)
    NUMBER          reduce using rule 7 (wff -> LPAR MINUS wff wff RPAR .)
    LPAR            reduce using rule 7 (wff -> LPAR MINUS wff wff RPAR .)
    STRING          reduce using rule 7 (wff -> LPAR MINUS wff wff RPAR .)
    VARIABLE        reduce using rule 7 (wff -> LPAR MINUS wff wff RPAR .)
    RPAR            reduce using rule 7 (wff -> LPAR MINUS wff wff RPAR .)


state 55

    (8) wff -> LPAR MULT wff wff RPAR .

    $end            reduce using rule 8 (wff -> LPAR MULT wff wff RPAR .)
    NUMBER          reduce using rule 8 (wff -> LPAR MULT wff wff RPAR .)
    LPAR            reduce using rule 8 (wff -> LPAR MULT wff wff RPAR .)
    STRING          reduce using rule 8 (wff -> LPAR MULT wff wff RPAR .)
    VARIABLE        reduce using rule 8 (wff -> LPAR MULT wff wff RPAR .)
    RPAR            reduce using rule 8 (wff -> LPAR MULT wff wff RPAR .)


state 56

    (9) wff -> LPAR DIV wff wff RPAR .

    $end            reduce using rule 9 (wff -> LPAR DIV wff wff RPAR .)
    NUMBER          reduce using rule 9 (wff -> LPAR DIV wff wff RPAR .)
    LPAR            reduce using rule 9 (wff -> LPAR DIV wff wff RPAR .)
    STRING          reduce using rule 9 (wff -> LPAR DIV wff wff RPAR .)
    VARIABLE        reduce using rule 9 (wff -> LPAR DIV wff wff RPAR .)
    RPAR            reduce using rule 9 (wff -> LPAR DIV wff wff RPAR .)


state 57

    (12) bool -> LPAR LESS wff wff RPAR .

    $end            reduce using rule 12 (bool -> LPAR LESS wff wff RPAR .)
    LPAR            reduce using rule 12 (bool -> LPAR LESS wff wff RPAR .)
    TRUE            reduce using rule 12 (bool -> LPAR LESS wff wff RPAR .)
    FALSE           reduce using rule 12 (bool -> LPAR LESS wff wff RPAR .)
    RPAR            reduce using rule 12 (bool -> LPAR LESS wff wff RPAR .)


state 58

    (13) bool -> LPAR OR bool bool RPAR .

    $end            reduce using rule 13 (bool -> LPAR OR bool bool RPAR .)
    LPAR            reduce using rule 13 (bool -> LPAR OR bool bool RPAR .)
    TRUE            reduce using rule 13 (bool -> LPAR OR bool bool RPAR .)
    FALSE           reduce using rule 13 (bool -> LPAR OR bool bool RPAR .)
    RPAR            reduce using rule 13 (bool -> LPAR OR bool bool RPAR .)


state 59

    (14) bool -> LPAR AND bool bool RPAR .

    $end            reduce using rule 14 (bool -> LPAR AND bool bool RPAR .)
    LPAR            reduce using rule 14 (bool -> LPAR AND bool bool RPAR .)
    TRUE            reduce using rule 14 (bool -> LPAR AND bool bool RPAR .)
    FALSE           reduce using rule 14 (bool -> LPAR AND bool bool RPAR .)
    RPAR            reduce using rule 14 (bool -> LPAR AND bool bool RPAR .)


state 60

    (15) bool -> LPAR GREAT wff wff RPAR .

    $end            reduce using rule 15 (bool -> LPAR GREAT wff wff RPAR .)
    LPAR            reduce using rule 15 (bool -> LPAR GREAT wff wff RPAR .)
    TRUE            reduce using rule 15 (bool -> LPAR GREAT wff wff RPAR .)
    FALSE           reduce using rule 15 (bool -> LPAR GREAT wff wff RPAR .)
    RPAR            reduce using rule 15 (bool -> LPAR GREAT wff wff RPAR .)


state 61

    (16) bool -> LPAR GOEQ wff wff RPAR .

    $end            reduce using rule 16 (bool -> LPAR GOEQ wff wff RPAR .)
    LPAR            reduce using rule 16 (bool -> LPAR GOEQ wff wff RPAR .)
    TRUE            reduce using rule 16 (bool -> LPAR GOEQ wff wff RPAR .)
    FALSE           reduce using rule 16 (bool -> LPAR GOEQ wff wff RPAR .)
    RPAR            reduce using rule 16 (bool -> LPAR GOEQ wff wff RPAR .)


state 62

    (17) bool -> LPAR LOEQ wff wff RPAR .

    $end            reduce using rule 17 (bool -> LPAR LOEQ wff wff RPAR .)
    LPAR            reduce using rule 17 (bool -> LPAR LOEQ wff wff RPAR .)
    TRUE            reduce using rule 17 (bool -> LPAR LOEQ wff wff RPAR .)
    FALSE           reduce using rule 17 (bool -> LPAR LOEQ wff wff RPAR .)
    RPAR            reduce using rule 17 (bool -> LPAR LOEQ wff wff RPAR .)


state 63

    (18) bool -> LPAR NEQUAL wff wff RPAR .

    $end            reduce using rule 18 (bool -> LPAR NEQUAL wff wff RPAR .)
    LPAR            reduce using rule 18 (bool -> LPAR NEQUAL wff wff RPAR .)
    TRUE            reduce using rule 18 (bool -> LPAR NEQUAL wff wff RPAR .)
    FALSE           reduce using rule 18 (bool -> LPAR NEQUAL wff wff RPAR .)
    RPAR            reduce using rule 18 (bool -> LPAR NEQUAL wff wff RPAR .)

